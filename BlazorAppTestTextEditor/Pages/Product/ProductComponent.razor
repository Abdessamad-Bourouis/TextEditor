@page "/product/Create"
@page "/product/edit/{Id:int}"
@inject IProductRepository _productRepository;
@inject ICategoryRepository _categoryRepository;
@inject NavigationManager _navigationManager;
@inject IJSRuntime _jsRuntime;

<div class="row my-2">

    <h3 class="card-title text-primary mb-3 ml-3">@Title Product</h3>
    <div class="col-md-9">
        @if (IsLoading)
        {
            <div class="text-center">
                <h3>Loading...</h3>
            </div>
        }
        else
        {
            <EditForm Model="Product" OnSubmit="UpsertProduct">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="Product.Name" class="form-control"></InputText>
                    <ValidationMessage For="()=>Product.Name"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Color</label>
                    <InputText @bind-Value="Product.Color" class="form-control"></InputText>
                    <ValidationMessage For="()=>Product.Color"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Description</label>
                  
                   
                  <BlazoredTextEditor @ref="QuillHtml"  Placeholder="entrer .. ">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                                <button class="ql-indent" value="-1"></button>
                                <button class="ql-indent" value="+1"></button>
                                <select class="ql-align">
                                    <option selected=""></option>
                                    <option value="center"></option>
                                    <option value="right"></option>
                                    <option value="justify"></option>
                                </select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-image" ></button>
                            </span>
                        </ToolbarContent>
                        <EditorContent>
                                <div>
                                    @((MarkupString)Product.Description)
                                </div>
                        </EditorContent>
                    </BlazoredTextEditor>
                </div>
                <div class="row pt-3">
                    <div class="btn-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.Shopfavorites" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Is Shop Favorites</label>
                        </div>
                    </div>
                    <div class="btn-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.CustomerFavorites" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Is Customer Favorites</label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                            <label>Category </label>
                            <InputSelect @bind-Value="Product.CategoryId" class="form-select">
                                <option value="0" disabled="disabled" selected>--Select Category--</option>
                            @foreach(var cat in Categories)
                            {
                                <option value="@cat.Id">@cat.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="()=>Product.CategoryId"></ValidationMessage>

                    </div>
                 
                </div>

                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="product" class="btn btn-secondary">Back to List Product</NavLink>
                </div>
            </EditForm>
        }
    </div>
    
</div>
@code {
    
    [Parameter]
    public int Id { get; set; }
    BlazoredTextEditor QuillHtml;

    private List<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    private ProductDTO Product { get; set; } = new ProductDTO();
    private string Title { get; set; } = "Create";
    public bool IsLoading { get; set; } = true;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProducts(); 
            
        }
    }

    private async Task LoadProducts()
    {
        IsLoading = true;

        StateHasChanged();
        Categories = await _categoryRepository.GetAll();
        if(Id!=0)
        {
            //Update
            Title = "Edit";
            Product = await _productRepository.GetById(Id);
        }
        IsLoading = false;
        StateHasChanged();

    }

    private async Task UpsertProduct()
    {
        if (Product.Id == 0)
        {
            //create
            Product.Description = await QuillHtml.GetHTML();
            
            await _productRepository.Create(Product);
            await _jsRuntime.SweetAlertSuccess("Product created successfully");
        }
        else
        {
            Product.Description = await QuillHtml.GetHTML();
            await _productRepository.Update(Product);
            await _jsRuntime.SweetAlertSuccess("Product updated successfully");
        }
       
        _navigationManager.NavigateTo("product");
    }

}
